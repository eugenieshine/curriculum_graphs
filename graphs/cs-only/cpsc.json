{
  "nodes": [
    {
      "id": 110,
      "name": "110",
      "core": 1,
      "cs": 1,
      "course": 1,
      "fy": -0.5,
      "fx": 3,
      "clos": ["Understand a systematic design process. This is demonstrated by being able to write programs for a reasonably complex task, where multiple parts of the design method are required.", 
        "Understand that programs are written both to run on computers and for people to read. This is demonstrated by being able to write code that is readable, well organized, documented, and tested.",
        "Understand the relation between information and data. This is demonstrated by being able to design the data representation for a reasonably complex problem, and to describe the information encoded in the given data.",
        "Understand that programs have structure beyond that of the language constructs. Understand that this structure comes from data and other design patterns, and is critical to writing and reading complex programs. This is demonstrated by being able to identify correspondences between a data definition and a program that operates on that data, and by being able to identify other design patterns in a program.",
        "Understand that one can replace repetitive code with an abstraction in a systematic way. Understand that this is at the heart of designing libraries. This is demonstrated by being able to produce examples of code before and after abstraction: before, where one can see the repeated code, and after, where one can see the abstraction and verify that it provides the solution to the original problem, as well as several other similar problems. Students should also be able to design a program that uses existing libraries or existing code to solve a new problem.",
        "Understand that programs can be described using notations other than code, and that these models can facilitate program design. This is demonstrated by being able to identify correspondences between non-code models of a program and the program itself and by being able to use non-code models in program design."
      ]
    },
    {
      "id": 121,
      "name": "121",
      "core": 1,
      "cs": 1,
      "course": 1,
      "fy": 0.5,
      "fx": 10,
      "clos": ["Model computational systems (e.g., programs and circuits) and apply valid reasoning to these models, i.e. prove relevant properties or reason through functionality of computational systems using predicate logic, propositional logic and state machines.",
        "Clearly and precisely communicate computational models to computer scientists.",
        "Identify alternate methods to solve or simplify a variety of problems by translating between (1) English language, (2)  simple formal representations (i.e., propositional and shallowly nested predicate logic statements) and (3) closely related equivalent formal representations, and then use the different representations to solve the problem.",
        "Write proofs for simple theorems by translating the theorem into first-order logic, decomposing the statement, and applying an appropriate proof-technique such as direct proofs, indirect proofs by contrapositive, indirect proofs by contradiction, proofs by weak and strong mathematical induction. Justify why each step of the proof is correct.",
        "Prove features of simple algorithms (e.g.,selection sort, recursive binary search, or quicksort) correct or bound in their running time. Justify why each step of the proof is correct.",
        "Create regular expressions and DFAs to solve problems that are important in programming."
      ]
    },
    {
      "id": 210,
      "name": "210",
      "core": 1,
      "cs": 1,
      "course": 1,
      "fy": 1,
      "fx": 10,
      "clos": ["Specify a new program, given a small problem description, by identifying relevant data abstractions, and specifying the associated behaviour of those abstractions.",
        "Validate the program’s behaviour against its specification prior to implementation using test driven design, through writing unit tests that achieve basic code coverage.",
        "Implement the program in Java, choosing the internal structure of its abstractions, and carry out implementation choices.",
        "Design software using basic Object oriented design principles (coupling, cohesion, single responsibility, substitution), robustness, and design patterns where applicable.",
        "Analyse the structure and behaviour of an existing small to medium sized codebase by making static and dynamic models and identifying design idioms, including design patterns, present in the code.",
        "Evolve a small to medium sized codebase by changing or augmenting behaviour of the code through alteration, subtyping or composition.",
        "Recover from common structural issues through identifying those issues, and selecting and applying  the appropriate refactorings.",
        "Communicate (orally through code demonstration) implementation choices, and the rationale for those choices."
      ]
    },
    {
      "id": 213,
      "name": "213",
      "core": 1,
      "cs": 1,
      "course": 1,
      "fy": 2,
      "fx": 15,
      "clos": ["Using a hardware based model of execution, reason about the limitations, vulnerabilities and idiosyncrasies of the behaviour of a particular program, specifically concerning performance, bugs and security vulnerabilities.",
        "Using a hardware based model of data, reason about how programs access data using different types of variables, including the implicit and explicit use of memory references.",
        "Translate a statement from a high-level programming language into assembly language; from a large block of assembly language, identify groups of instructions that correspond to high level language features and then write an equivalent high level programming language expression.",
        "Identify and correct memory management bugs, particularly in languages with explicit deallocation, and use best practices to write code that is less likely to incur such issues.",
        "Compare and contrast how Java and C are translated into a language the CPU understands; identify common features that are implemented in significantly different ways in either language (for instance, memory management, and the duality of subtype polymorphism in Java and function pointers in C). In doing so, explain the tradeoffs associated with each.",
        "Reason about the execution of concurrent programs, incl. real time interrupts, and use both asynchronous programming and threads to write concurrent and/or parallel programs. Explain the tradeoffs associated with each.",
        "Solve problems using monitors, condition variables and semaphores."
      ]
    },
    {
      "id": 221,
      "name": "221",
      "core": 1,
      "cs": 1,
      "course": 1,
      "fy": 2,
      "fx": 22,
      "clos": ["Define and articulate the functionality of classic data structures such as Stacks, Queues, Dictionaries, Priority Queues, etc. by their Abstract Data Type (ADT).",
        "Design algorithms and structures to implement novel ADTs based on properties of the data and intended use of the data.",
        "Implement classic and novel data structures in modern C++, including arrays, linked lists, balanced binary search trees, hash tables, etc.",
        "Analyze the efficiency (time and space) of algorithms and data structures using asymptotic notation (Big-O, Big-Omega, Big-Theta).",
        "Prove algorithm correctness using iterative and recursive methods.",
        "Evaluate asymptotic time and space tradeoffs between implementation options.",
        "Identify the structures and algorithms necessary for solving complex problems.",
        "Synthesize and apply algorithmic and analytical design choices to form complete software solutions of classic problems."
      ]
    },
    {
      "id": 310,
      "name": "310",
      "core": 1,
      "cs": 1,
      "course": 1,
      "fy": 3,
      "fx": 9,
      "clos": ["Evaluate software engineering processes used to build modern industrial-calibre systems by justifying their benefits and tradeoffs.",
        "Elicit, deconstruct, and refine functional requirements and quality attributes such that they are described succinctly, completely, and precisely.",
        "Devise and justify high- and low-level designs to support a given set of requirements and in support of future evolutionary needs.",
        "Iteratively derive implementations of a design of reasonable complexity incorporating emergent design implications, and applying code-level restructuring for the sake of facilitating changes.",
        "Carry out the implementation of a design incorporating ethical and security implications of code-level choices and software process and methodological approaches.",
        "Independently acquire and apply modern and unfamiliar technology and language stacks.",
        "Validate systems using both black-box and white-box approaches to reason about, and improve the quality of a software system."
      ]
    },
    {
      "id": 320,
      "name": "320",
      "core": 1,
      "cs": 1,
      "course": 1,
      "fy": 3.5,
      "fx": 19,
      "clos": ["Identify the algorithm technique (such as divide and conquer, prune and search, greedy strategies, or dynamic programming) used in a given algorithm.",
        "Select, adapt, and evaluate promising algorithmic techniques and/or data structures for a given problem by analyzing the problem’s properties.",
        "Design and prove the correctness of a solution to a problem using a specified algorithm technique, given sufficient information about the form of that problem’s solution.",
        "Select, evaluate and apply promising mathematical techniques (such as asymptotic notations, recurrence relations, and decision trees) to prove reasonably tight upper and lower bounds on the running time of algorithms.",
        "Decide how and when to reduce a known problem to another problem of interest, either to obtain an efficient  solution to the latter, or to prove that  such a  solution is  unlikely to exist  in the  context of NP-hardness.",
        "Explore and apply promising mathematical techniques for modelling (such as predicate logic, graphs, or asymptotic notations) and analysis (such as asymptotic runtime analysis, recurrence relations, or decision trees) to specify and prove important properties of algorithmic problems and their solutions."
      ]
    },
    {
      "id": 313,
      "name": "313",
      "core": 1,
      "cs": 1,
      "course": 1,
      "fy": 3.5,
      "fx": 16,
      "clos": ["Explain the benefits of, and challenges associated with, instruction-level parallelism and its implementation.",
        "Describe at least one high-level architecture for a pipelined CPU. Correctly analyze examples of the timing of instructions passing through this architecture to identify dependencies and hazards.",
        "Explain why different types of memory need to be used in modern computers, and how the constraints on physical size, capacity and speed affect the performance of computer code. Correctly analyze examples of memory access patterns and locality to compute the steps required to retrieve the information and/or to update the memory state, while maintaining optimal performance for future accesses.",
        "Explain the issues that must be considered while designing file systems and some common solutions for these issues. Given a file system specification, correctly analyze examples of typical file system operations to identify how to retrieve necessary information or update the file system state. Explain the role that caching, buffering, and partial failure play in the implementation and use of files systems, including differentiating between the role that mechanism and policy play in the operating system and in applications that access file data.",
        "Explain how a modern operating system can share a computer’s processing and memory resources among multiple untrusted and competing processes. Correctly analyze examples of virtual memory accesses in individual processes to (1) compute the steps required to retrieve the information and/or update the memory state, and to (2) identify when hardware can perform an operation autonomously and when the operating system has to be invoked.",
        "Optimize C code in order to make it run faster by refining its locality and use of processor and memory resources. Optimize at least one version of Assembly code to make it run faster by reducing the number of hazards in typical pipelined CPUs."
      ]
    },
    {
      "id": 100,
      "name": "100",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": -1,
      "fx": 0.5
    },
    {
      "id": 103,
      "name": "103",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": -1,
      "fx": 1.5
    },
    {
      "id": 107,
      "name": "107",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": -0.5,
      "fx": 10
    },
    {
      "id": 160,
      "name": "APSC160",
      "core": 0,
      "cs": 0,
      "course": 0,
      "fy": -0.5,
      "fx": 12
    },
    {
      "id": 203,
      "name": "203",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 1,
      "fx": 3
    },
    {
      "id": 259,
      "name": "259",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 0,
      "fx": 12
    },
    {
      "id": 261,
      "name": "261",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 2,
      "fx": 19
    },
    {
      "id": 302,
      "name": "302",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 3,
      "fx": 2
    },
    {
      "id": 303,
      "name": "303",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 3,
      "fx": 1
    },
    {
      "id": 304,
      "name": "304",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 3.5,
      "fx": 22
    },
    {
      "id": 311,
      "name": "311",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 3,
      "fx": 12
    },
    {
      "id": 312,
      "name": "312",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 3,
      "fx": 11
    },
    {
      "id": 314,
      "name": "314",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 3,
      "fx": 26
    },
    {
      "id": 317,
      "name": "317",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 3.5,
      "fx": 14
    },
    {
      "id": 319,
      "name": "319",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 3.5,
      "fx": 8
    },
    {
      "id": 322,
      "name": "322",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 3,
      "fx": 27
    },
    {
      "id": 330,
      "name": "330",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 3,
      "fx": 3
    },
    {
      "id": 340,
      "name": "340",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 3,
      "fx": 25
    },
    {
      "id": 344,
      "name": "344",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 3,
      "fx": 10
    },
    {
      "id": 402,
      "name": "402",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 2
    },
    {
      "id": 404,
      "name": "404",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 22
    },
    {
      "id": 406,
      "name": "406",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 1
    },
    {
      "id": 410,
      "name": "410",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 9
    },
    {
      "id": 411,
      "name": "411",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 12
    },
    {
      "id": 415,
      "name": "415",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 16
    },
    {
      "id": 416,
      "name": "416",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 15
    },
    {
      "id": 417,
      "name": "417",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 14
    },
    {
      "id": 418,
      "name": "418",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 17
    },
    {
      "id": 420,
      "name": "420",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 20
    },
    {
      "id": 421,
      "name": "421",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 21
    },
    {
      "id": 422,
      "name": "422",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 27
    },
    {
      "id": 424,
      "name": "424",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 18
    },
    {
      "id": 425,
      "name": "425",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 25
    },
    {
      "id": 426,
      "name": "426",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 26
    },
    {
      "id": 427,
      "name": "427",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 24
    },
    {
      "id": 430,
      "name": "430",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 30
    },
    {
      "id": 4301,
      "name": "3rd year standing",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 3.5,
      "fx": 33
    },
    {
      "id": 4302,
      "name": "3-credit CPSC course",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 3.5,
      "fx": 30
    },
    {
      "id": 444,
      "name": "444",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 10
    },
    {
      "id": 445,
      "name": "445",
      "core": 0,
      "cs": 1,
      "course": 1,
      "fy": 4.5,
      "fx": 19
    },
    {
      "id": 1,
      "name": "OR",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 0,
      "fx": 10
    },
    {
      "id": 2,
      "name": "OR",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 0.5,
      "fx": 1.5
    },
    {
      "id": 3,
      "name": "OR",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 0.5,
      "fx": 5
    },
    {
      "id": 4,
      "name": "OR",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 2.5,
      "fx": 3
    },
    {
      "id": 5,
      "name": "OR",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 2,
      "fx": 5
    },
    {
      "id": 6,
      "name": "OR",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 3.5,
      "fx": 1.5
    },
    {
      "id": 7,
      "name": "AND",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 1.5,
      "fx": 15
    },
    {
      "id": 8,
      "name": "AND",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 3.5,
      "fx": 10
    },
    {
      "id": 9,
      "name": "AND",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 2.7,
      "fx": 15
    },
    {
      "id": 10,
      "name": "AND",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 4,
      "fx": 21
    },
    {
      "id": 11,
      "name": "OR",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 4,
      "fx": 17
    },
    {
      "id": 12,
      "name": "AND",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 4,
      "fx": 15
    },
    {
      "id": 13,
      "name": "AND",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 3.5,
      "fx": 12
    },
    {
      "id": 14,
      "name": "AND",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 4,
      "fx": 22
    },
    {
      "id": 15,
      "name": "OR",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 3,
      "fx": 19
    },
    {
      "id": 16,
      "name": "OR",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 3,
      "fx": 21
    },
    {
      "id": 17,
      "name": "AND",
      "core": 0,
      "cs": 1,
      "course": 0,
      "fy": 4,
      "fx": 30
    }
  ],
  "links": [
    {
      "source": 107,
      "target": 103
    },
    {
      "source": 121,
      "target": 1,
      "type": "coreq"
    },
    {
      "source": 1,
      "target": 110,
      "type": "coreq"
    },
    {
      "source": 1,
      "target": 107,
      "type": "coreq"
    },
    {
      "source": 203,
      "target": 2
    },
    {
      "source": 302,
      "target": 2
    },
    {
      "source": 303,
      "target": 2
    },
    {
      "source": 2,
      "target": 103
    },
    {
      "source": 2,
      "target": 110
    },
    {
      "source": 210,
      "target": 3
    },
    {
      "source": 406,
      "target": 6
    },
    {
      "source": 402,
      "target": 6
    },
    {
      "source": 6,
      "target": 302
    },
    {
      "source": 6,
      "target": 303
    },
    {
      "source": 4,
      "target": 3
    },
    {
      "source": 3,
      "target": 110
    },
    {
      "source": 3,
      "target": 107
    },
    {
      "source": 330,
      "target": 4
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 5,
      "target": 203
    },
    {
      "source": 5,
      "target": 210
    },
    {
      "source": 312,
      "target": 210
    },
    {
      "source": 344,
      "target": 210
    },
    {
      "source": 310,
      "target": 210
    },
    {
      "source": 311,
      "target": 210
    },
    {
      "source": 444,
      "target": 8
    },
    {
      "source": 8,
      "target": 344
    },
    {
      "source": 8,
      "target": 310
    },
    {
      "source": 410,
      "target": 310
    },
    {
      "source": 319,
      "target": 310
    },
    {
      "source": 213,
      "target": 7
    },
    {
      "source": 7,
      "target": 121
    },
    {
      "source": 7,
      "target": 210
    },
    {
      "source": 221,
      "target": 7
    },
    {
      "source": 411,
      "target": 13
    },
    {
      "source": 13,
      "target": 311
    },
    {
      "source": 13,
      "target": 9
    },
    {
      "source": 9,
      "target": 221
    },
    {
      "source": 9,
      "target": 213
    },
    {
      "source": 313,
      "target": 9
    },
    {
      "source": 317,
      "target": 9
    },
    {
      "source": 425,
      "target": 221
    },
    {
      "source": 314,
      "target": 221
    },
    {
      "source": 304,
      "target": 221
    },
    {
      "source": 340,
      "target": 221
    },
    {
      "source": 322,
      "target": 221
    },
    {
      "source": 422,
      "target": 322
    },
    {
      "source": 404,
      "target": 14
    },
    {
      "source": 14,
      "target": 304
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 15,
      "target": 213
    },
    {
      "source": 15,
      "target": 261
    },
    {
      "source": 426,
      "target": 314
    },
    {
      "source": 10,
      "target": 16
    },
    {
      "source": 16,
      "target": 221
    },
    {
      "source": 16,
      "target": 261
    },
    {
      "source": 10,
      "target": 320,
      "type": "recommend"
    },
    {
      "source": 421,
      "target": 10
    },
    {
      "source": 427,
      "target": 221
    },
    {
      "source": 424,
      "target": 320
    },
    {
      "source": 420,
      "target": 320
    },
    {
      "source": 445,
      "target": 320
    },
    {
      "source": 11,
      "target": 320
    },
    {
      "source": 11,
      "target": 313
    },
    {
      "source": 11,
      "target": 261
    },
    {
      "source": 418,
      "target": 11
    },
    {
      "source": 415,
      "target": 313
    },
    {
      "source": 12,
      "target": 313
    },
    {
      "source": 12,
      "target": 317
    },
    {
      "source": 417,
      "target": 12
    },
    {
      "source": 416,
      "target": 12
    },
    {
      "source": 320,
      "target": 221
    },
    {
      "source": 259,
      "target": 160
    },
    {
      "source": 430,
      "target": 17
    },
    {
      "source": 17,
      "target": 4301
    },
    {
      "source": 17,
      "target": 4302
    }
  ]
}